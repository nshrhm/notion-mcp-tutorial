# Cline Rules for Notion MCP Project

## 設定ファイル管理
1. 基本ルール
   - 設定ファイルは指定されたパスに配置
   - JSONフォーマットの厳格な維持
   - センシティブ情報の適切な管理

2. バージョン管理
   - 設定変更は記録を残す
   - 変更前の動作確認
   - バックアップの維持

## セキュリティガイドライン
1. トークン管理
   - 環境変数での管理
   - 公開リポジトリでの秘匿
   - 定期的な更新検討

2. 情報公開
   - 公開可能情報の明確な定義
   - サンプルではダミーデータを使用
   - センシティブ情報の除外確認

## コンテンツ作成ガイドライン
1. 教育コンテンツ
   - 大学1年生レベルを基準
   - 段階的な説明構造
   - 実践的な例示

2. ドキュメント
   - 明確な説明
   - コード例の提供
   - 実行手順の詳細化
   - **環境依存性の明記:** コード例（特にデータベース操作）がユーザーのNotion環境（プロパティ名、型など）に依存する場合、その旨と確認・修正を促す注意書きを必ず含める。

## 作業プロセス
1. 実装手順
   - 設計の文書化
   - 段階的な実装
   - テストの実施

2. 検証手順
   - 動作確認
   - セキュリティチェック
   - ドキュメント更新

## Memory Bank管理
1. 更新ルール
   - 重要な変更時に更新
   - 全ファイルの整合性確認
   - 進捗状況の反映

2. 構成管理
   - ファイル構造の維持
   - 相互参照の整合性
   - バックアップの作成

## プロジェクト特有のパターン
1. API操作 (Notion MCP)
   - **ツール名の正確性:** Notion APIの機能名とMCPツール名（例: `API-create-a-database`）は微妙に異なる場合があるため、常にMCPサーバーの定義を確認する。
   - **パラメータ形式:**
     - `filter` (データベースクエリ): JSONオブジェクトを **文字列化** して渡す必要がある。
     - `properties` (ページ更新等): MCPサーバーの実装やツール仕様により、オブジェクト直接かJSON文字列かが異なる可能性があるため、都度確認する。
   - エラーハンドリングの統一
   - レスポンス処理の標準化
   - 再利用可能なパターン

2. 教育コンテンツ
   - 実践的な例題
   - 段階的な難易度
   - フィードバック収集

## 注意事項
1. 公開時の確認
   - センシティブ情報の除去
   - ライセンスの確認
   - 著作権の明記

2. コミュニティ対応
   - フィードバックの収集
   - 改善提案の反映
   - コミュニティ貢献の促進

## プロジェクト固有の命名規則
1. ファイル名
   - 明確な意図を示す命名
   - 一貫した命名規則
   - バージョン番号の付与

2. 変数・関数名
   - 説明的な命名
   - 教育的な命名
   - 一貫性の維持
